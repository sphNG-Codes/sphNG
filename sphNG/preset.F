      SUBROUTINE preset(ihopin)
c************************************************************
c                                                           *
c  This routine makes sure that everything not entered as   *
c     option is defined before integration begins.          *
c                                                           *
c************************************************************

      INCLUDE 'idim'
      INCLUDE 'igrape'

#ifdef MPIALL
      INCLUDE 'mpif.h'
      INCLUDE 'COMMONS/mpiall'
#endif

      INCLUDE 'COMMONS/part'
      INCLUDE 'COMMONS/densi'
      INCLUDE 'COMMONS/kerne'
      INCLUDE 'COMMONS/logun'
      INCLUDE 'COMMONS/files'
      INCLUDE 'COMMONS/numpa'
      INCLUDE 'COMMONS/nlim'
      INCLUDE 'COMMONS/bodys'
      INCLUDE 'COMMONS/btree'
      INCLUDE 'COMMONS/stop'
      INCLUDE 'COMMONS/tming'
      INCLUDE 'COMMONS/recor'
      INCLUDE 'COMMONS/typef'
      INCLUDE 'COMMONS/polyk2'
      INCLUDE 'COMMONS/ptmass'
      INCLUDE 'COMMONS/nextmpt'
      INCLUDE 'COMMONS/phase'
      INCLUDE 'COMMONS/ptdump'
      INCLUDE 'COMMONS/actio'
      INCLUDE 'COMMONS/ptsoft'
      INCLUDE 'COMMONS/soft'
      INCLUDE 'COMMONS/initpt'
      INCLUDE 'COMMONS/binfile'
      INCLUDE 'COMMONS/delay'
      INCLUDE 'COMMONS/useles'
      INCLUDE 'COMMONS/gtime'
      INCLUDE 'COMMONS/optbl'
      INCLUDE 'COMMONS/tgtbl'
      INCLUDE 'COMMONS/mutbl'
      INCLUDE 'COMMONS/dusttbl'
      INCLUDE 'COMMONS/utbl'
      INCLUDE 'COMMONS/gaptbl'
      INCLUDE 'COMMONS/debug'
      INCLUDE 'COMMONS/cgas'
      INCLUDE 'COMMONS/updated'
      INCLUDE 'COMMONS/rbnd' ! for periodic_no_ghosts
      INCLUDE 'COMMONS/boundheight'
      INCLUDE 'COMMONS/andrea'
      INCLUDE 'COMMONS/astrcon'
      INCLUDE 'COMMONS/units'
      INCLUDE 'COMMONS/sort'

      CHARACTER*7 where

      DATA where/'preset'/

      INTEGER ihopin

      IF(ihopin.NE.1) THEN
c
c--Open file1
c
#ifdef MPI
c      CALL appendiproc(7,file1,iproc)
         write (*,*) 'About to open ',file1
#endif

         OPEN (idisk1, FILE=file1, STATUS='unknown', 
     &        FORM='unformatted', RECL=imaxrec)
c
c--Find correct dump to start
c
         CALL place(idisk1, ipos, irec, 1)
c
c--Read dump
c
         CALL rdump_wrapper(idisk1, ichkl, 0)
         CLOSE (idisk1)
         IF (ichkl.EQ.1) CALL error(where, ichkl)
c
c--Open point mass data output file
c
         WRITE (ptfile,99990) namerun
99990    FORMAT ('P', A20)
         WRITE (accfile,99991) namerun
99991    FORMAT ('A', A20)
#ifdef MPI
c         CALL appendiproc(21,ptfile,iproc)
c         CALL appendiproc(21,accfile,iproc)
#endif
         IF (nptmass.NE.0 .OR. iptmass.NE.0) THEN
#ifdef MPIALL
            print *,iproc,': Preset ',ptfile
            IF (iproc.EQ.0) THEN
#endif
               OPEN (iptprint, FILE=ptfile,STATUS='unknown',
     &              FORM='unformatted')
               CLOSE (iptprint)
#ifdef MPIALL
            ENDIF
#endif
            OPEN (iaccpr,FILE=accfile,STATUS='unknown',
     &           FORM='unformatted')
         ENDIF
c
c--Open files for killing and reassignment of particles
c
         WRITE (killfile,99992) namerun
99992    FORMAT ('K', A20)
         WRITE (reassfile,99993) namerun
99993    FORMAT ('R', A20)
#ifdef MPI
c         CALL appendiproc(21,killfile,iproc)
c         CALL appendiproc(21,reassfile,iproc)
#endif
         IF (ibound.EQ.8 .OR. ibound/10.EQ.9 .OR. ibound.EQ.100) THEN
            OPEN (ikillpr, FILE=killfile, STATUS='unknown',
     &           FORM='unformatted')
            OPEN (ireasspr, FILE=reassfile, STATUS='unknown',
     &           FORM='unformatted')
         ENDIF
c
c--Open notify file
c
#ifdef MPIALL
         IF (iproc.EQ.0) THEN
#endif
            OPEN (inotify,FILE='notify')
#ifdef MPIALL
         ENDIF
#endif

      ENDIF

#ifdef MPIALL
      print *,iproc,': Preset B'
#endif

c
c--check ibound = 11 for periodic no ghosts
c
#ifdef PERIODIC_NO_GHOSTS
      IF (ibound.NE.11) STOP 'PERIODIC_NO_GHOSTS REQUIRES ibound=11'
      dxbound = xmax - xmin
      dybound = ymax - ymin
      dzbound = zmax - zmin
#endif

c
c--Initialize viscosity switch
c
      IF (ifsvi.EQ.6) THEN
         alphamin(1) = alpha
         alphamax(1) = beta
      ENDIF
      
      DO i = 1, npart
         IF (ifsvi.EQ.6 .AND. abs(gt).LT.tiny .OR. 
     &        alphaMM(1,i).EQ.0.0) THEN
            DO k = 1, isizealphaMM
               alphaMM(k,i) = alphamin(k)
            ENDDO
c
c--always initialise resistivity (assumes constant value of alphamin
c  if ifsvi.ne.6)
c
         ELSEIF (imhd.EQ.idim .and. abs(gt).LT.tiny) THEN
            alphaMM(2,i) = alphamin(2)
         ENDIF
      END DO
#ifdef MPIALL
      print *,iproc,': Preset C'
#endif
c
c--Set constant for artificial viscosity
c
c      IF (alpha.EQ.0. .AND. beta.EQ.0.) THEN
c         alpha = 1.0
c         beta = 2.0
c      ENDIF
c
c--Set accuracy parameter for tree force calculation
c     theoretical limit for 3D tree is 0.57 = 1/SQRT(3)
c
c      acc = 0.7
      acc = 0.5
c      acc = 0.3
c      acc = 0.0
c
c--Set stop flag
c
      istop = 0
c
c--Set min and max limit of neighbours the code tries to inforce
c
      neimin = 30
      neimax = 70
      nrange = 12
c
c--Set mass for particle being partially accreted at which it is 
c     completely accreted
c
      pmassmin = 1.0E+10
      fmas1 = 0.
      fmas2 = 0.
      DO i = 1, npart
         IF (iphase(i).GE.0) THEN
            IF (iunique(iorig(i)).LE.n1) THEN
               fmas1 = fmas1 + xyzmh(4,i)
            ELSE
               fmas2 = fmas2 + xyzmh(4,i)
            ENDIF
            IF (pmassmin.GT.xyzmh(4,i)) pmassmin = xyzmh(4,i)
         ENDIF
      END DO
      pmassleast = pmassmin/100.
c
c--Point Mass Presets
c
c--Set critical density for point mass creation
c
      rhocrea = rhozero*ptmcrit
c
c--Standardise point mass types and accretion radii
c
#ifdef MPIALL
      print *,iproc,': Preset D ',nptmass,initialptm
#endif
      DO i = 1, nptmass

#ifdef MPIALL
         print *,iproc,': Preset Ds ',nptmass,i
         print *,iproc,': Preset Ds ',listpm(i)
#endif
         iptcur = listpm(i)
         IF (initialptm.LT.1 .OR. initialptm.GT.6) CALL error(where, 2)
         iphase(iptcur) = initialptm
cccc         xyzmh(5,iptcur) = hacc
      END DO
c
c--For Massive Accretion, only accrete mass and change ptmass properties
c     for certain particles - exclude these:
c
#ifdef MPIALL
      print *,iproc,': Preset Da '
#endif
      DO i = 1, idim
         notacc(i) = .FALSE.
         iupdated(i) = .FALSE.
      END DO
      nnotacc = 0
c      WRITE (iprint,*) '********* IDELAYACC = 1 *********'
c      OPEN (22, FILE='WANTRUN')
c 50   READ (22, *, END=100) inum
c      nnotacc = nnotacc + 1
c      notacc(inum) = .TRUE.
c      GOTO 50
c 100  CLOSE(22)
c
c--Gravitational softening for ptmass-ptmass interactions
c
      iptsoft = 1
      ptsoft = 1.000E-06

#ifdef MPIALL
      print *,iproc,': Preset Db '
#endif
c
c--Set psoft for softening the gravitational potential when the 1/(r+psoft)
c     potential law is used (i.e. when igrape=1, or isoft=1).
c
      psoft = 0.01
c
c--Value of minimum h in order to save computing time (if hmin is different
c     from 0 then program does not follow high density regions accurately)
c
      hmin = 0.
c      hmin = 0.01

      IF (isoft.EQ.1 .AND. hmin.LT.psoft) hmin = psoft
c
c--Compute tables for kernel quantities
c
#ifdef MPIALL
      print *,iproc,': Preset E'
#endif
      CALL ktable
c
c--Load in tables of opacity and cv
c
c      IF (encal.EQ.'r' .OR. encal.EQ.'m') THEN
      IF (encal.EQ.'r' .OR. (encal.EQ.'i' .AND. ibound.EQ.102)) THEN

         print *, 'Reading tables in preset'

         OPEN(UNIT=8,FILE='/home/mrbate/tables/opacitytbl')
         DO i=1, opmxtg
            READ(8,*) (optable(i,j), j=1, opmxrh)
         ENDDO
         CLOSE(8)
      
         OPEN(UNIT=8,FILE='/home/py02baa/Code/Tables/gasttbl',
     &        FORM='unformatted')
         DO i=1, tgmxu
            READ(8) (tgtable(i,j), j=1, tgmxrh)
         ENDDO
         CLOSE(8)

         OPEN(UNIT=8,FILE='/home/py02baa/Code/Tables/utbl',
     &        FORM='unformatted')
         DO i=1, umxrh
            READ(8) (utable(j,i), j=1, umxt)
         ENDDO
         CLOSE(8)
 
         OPEN(UNIT=8,FILE='/home/mrbate/tables/molmasstbl',
     &        FORM='unformatted')
         DO i=1, mumxu
            READ(8) (mutable(i,j), j=1, mumxrh)
         ENDDO
         CLOSE(8)

         OPEN(UNIT=8,FILE='/home/py02baa/Code/Tables/dusttbl2')
         DO i=1, duslen
            READ(8,*) (dusttable(i,j), j=1, duswid)
         ENDDO
         CLOSE(8)

      ENDIF

      IF (ibound.EQ.100) THEN
         OPEN(UNIT=8,FILE='/home/mrbate/tables/gaptbl')
         DO i=1, gaplen
            READ(8,*) (gaptable(i,j), j=1, gapwid)
         ENDDO
         CLOSE(8)
      ENDIF
c
c--Andrea Fortier provided tables to introduce planetesimal heating
c  to planet calculations.
c
      e_planetesimal(:) = 0.0

      IF (iandrea.EQ.1) THEN
         OPEN(UNIT=8,FILE=
     &        '/home/py02baa/Code/Tables/planetesimals')
         READ (8,*) prmin, princ
         READ (8,*) pmmin, pminc
         pmmin = pmmin*5.9742E27/umass
         pminc = pminc*5.9742E27/umass
         DO i = 1, mbins
            READ (8,*) (ptable(i,j), j = 1, rbins)
         ENDDO
         DO i = 1, mbins
            DO j = 1, rbins
               ptable(i,j) = (ptable(i,j))*utime/uergg
            ENDDO
         ENDDO
      ENDIF

      IF ((ibound.EQ.101 .OR. ibound.EQ.102) .AND. encal.EQ.'r') THEN
         CALL discboundary(ibound)
         print *, 'Disc optically thin boundary set'
      ENDIF

      IF (ihopin.NE.1) THEN
c
c--Build table for choosing inflow into planet/disc simulation
c 
         IF (ibound.EQ.100 .AND. iexf.EQ.7) THEN
            CALL cumradtable
c
c--Build table for choosing inflow into planet/disc simulation from ZEUS
c     output
c 
            CALL zeusread
            print *, 'Building ZEUS table for mass', hmass
            CALL zeustable
         ENDIF
      ENDIF 
      IF (itrace.EQ.'all') WRITE(iprint,250)
 250  FORMAT(' exit subroutine preset')
#ifdef MPIALL
      print *,iproc,': Preset F'
#endif

      RETURN
      END

      SUBROUTINE appendiproc(numchar,string,iproc)

      CHARACTER*25 string

      IF (iproc.LT.10) THEN
         WRITE (string,99001) string(1:numchar),iproc
99001    FORMAT(A7,'.00',I1)
      ELSEIF (iproc.LT.100) THEN
         WRITE (string,99002) string(1:numchar),iproc
99002    FORMAT(A7,'.0',I2)
      ELSEIF (iproc.LT.1000) THEN
         WRITE (string,99003) string(1:numchar),iproc
99003    FORMAT(A7,'.',I3)
      ELSE
         WRITE (*,*) 'ERROR: string ',iproc
         CALL quit
      ENDIF

      RETURN
      END
