      SUBROUTINE ktable
c*********************************************************
c  This subroutine builds a table for the kernel,
c  the gradient of the kernel, the mass fraction,
c  and the potential energy.
c  The entry is v**2.
c
c  DO NOT EDIT: AUTO-GENERATED by kernels.py
c  KERNEL NAME: Wendland 2/3D C^2 
c  AUTHOR: kernels.py, by Daniel Price
c  GENERATED: 2014-05-12 23:25:57.666462
c
c*********************************************************
      IMPLICIT NONE ! because life is worth living
      INCLUDE 'idim'

      REAL*8 sum, v2max, q, q2, q3, q4, q5, q6, q7, q8, q9
      INTEGER i

      INCLUDE 'COMMONS/physcon'
      INCLUDE 'COMMONS/kerne'
      INCLUDE 'COMMONS/table'
      INCLUDE 'COMMONS/logun'
      INCLUDE 'COMMONS/debug'
c
c--Allow for tracing flow
c
      IF (itrace.EQ.'all') WRITE(iprint, 99001)
99001 FORMAT (' entry subroutine ktable')

      WRITE (iprint, 99002)
99002 FORMAT (/,' SPH Kernel : Wendland W2 ',/)
c
c--Maximum interaction length and step size
c
      radkernel = 2.0
      part1kernel = 2.0
      v2max = radkernel*radkernel
      dvtable = v2max/itable
      ddvtable = itable/v2max
c
c--Build tables
c
      DO i=0,itable
         q2 = i*dvtable
         q = sqrt(q2)
         q3 = q*q2
         q4 = q*q3
         q5 = q*q4
         q6 = q*q5
         q7 = q*q6
         q8 = q*q7
         q9 = q*q8
         IF (q < 2.0) THEN
            sum = (0.5*q - 1.0)**4*(2.0*q + 1.0)
            wij(i) = sum
            sum = 5.0*q*(0.5*q - 1.0)**3
            grwij(i) = sum
            sum = q3*(21.*q5 - 180.*q4 + 560.*q3 - 672.*q2 + 448.)/256.
            fmass(i) = sum
            sum = 3.*q7/256. - 15.*q6/128. + 7.*q5/16. - 21.*q4/32. + 
     &            7.*q2/8. - 3./2.
            fpoten(i) = sum
            sum = 0.09375*q7 - 0.8203125*q6 + 2.625*q5 - 3.28125*q4 + 
     &            2.625*q2 - 1.5
            dphidh(i) = sum
         ELSE
            sum = 0.0
            wij(i) = sum
            sum = 0.0
            grwij(i) = sum
            sum = 1.
            fmass(i) = sum
            sum = -1.0/q
            fpoten(i) = sum
            sum = 0.0
            dphidh(i) = sum
         ENDIF
      ENDDO
c
c--Normalisation constant
c
      cnormk = 1.3125/pi
      selfnormkernel = 1.
      part1potenkernel = 0.0 ! term already included in fpoten above
      part2potenkernel = 0.0 ! see above
c
c--For dust/gas drag, need double humped kernel
c
      doublehumpnormk = 105./(64.*pi)

      RETURN
      END
