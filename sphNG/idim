      INTEGER idim, idim2, idim3, iptdim, iptneigh, nlmax
      INTEGER mmax, mmax2, iradtrans, iradtrans2, idustRT, idustIMPL
      INTEGER istellarfeedback
      INTEGER imhd, imhd2, imhd3, imhdxsph, isizealphaMM
      INTEGER imhdevol, isubcycle_divB
      INTEGER idim_h2, idim_h2_2, idim_MPI
      INTEGER ioptimise_column
      INTEGER idustFluid, idim_dustFluid, idim_dustFluid2
      INTEGER idim_dustFluid3
      INTEGER idustGROW, idim_grow, idim_grow2
      INTEGER idimHY09, ndusttypes
      REAL tiny, dustvarmin, alphaSS_const
      LOGICAL imakedust, icoupled_HY09_dustFluid, ilimitdustflux
      LOGICAL iDumpDeltavTstop

      PARAMETER (idim=2001000)

      PARAMETER (iptdim=10)
      PARAMETER (iptneigh=100000)
      PARAMETER (tiny=1.0E-20)
c
c--For MPI need to set these
c
c      PARAMETER (idim_MPI=idim)
      PARAMETER (idim_MPI=1)
c
c--Flag for using grad-h version of code is nlmax=1
c      PARAMETER (nlmax = 90)
      PARAMETER (nlmax = 1)
c
c--For radiative transfer need to use iradtrans = idim
c
      PARAMETER (iradtrans = idim)
c      PARAMETER (iradtrans = 1)
c
c--For radiative transfer that separates gas and dust need idustRT = 1
c
      PARAMETER (idustRT = 1)
c      PARAMETER (idustRT = 0)
c
c--With idustRT = 1, the ioptimise_column parameter determines whether the
c	column densities are calculated every (half-)timestep (0), 
c	or less frequently (=1) [ever full timestep or even less often].
c	Tolerence is set in column_density.F file.
c
      PARAMETER (ioptimise_column = 1)
c      PARAMETER (ioptimise_column = 0)
c
c--Type of stellar evolution and feedback
c     0: No stellar feedback
c     1: Tout stellar evolution code
c     2: Baraffe stellar evolution code
c     3: Constant luminosity
c     4: Constant radius
c     5: Disk accretion
c     6: Disk accretion + Baraffe stellar evolution code

      PARAMETER (istellarfeedback=0)
c      PARAMETER (istellarfeedback=1)
c      PARAMETER (istellarfeedback=2)
c      PARAMETER (istellarfeedback=3)
c      PARAMETER (istellarfeedback=4)
c      PARAMETER (istellarfeedback=5)
c      PARAMETER (istellarfeedback=6)
c
c--For MHD need to use imhd = idim
c
c      PARAMETER (imhd = idim)
      PARAMETER (imhd = 1)
c
c--Sets the number of variables in the magnetic field array
c	Use 3 if only need Bxyz, use 4 if need psi as well for
c	divergence cleaning
c
c      PARAMETER (imhdevol = 3)
c      PARAMETER (isubcycle_divB = 0)
      PARAMETER (imhdevol = 4)
      PARAMETER (isubcycle_divB = 1)
c
c--Allows semi-implicit dust drag to be used for two-fluid dust.  
c     In combination, turning on idustIMPL=1 and imakedust
c     can be used to set two-fluid dust particles at 
c     terminal velocity initially.
c        0 = NO implicit two dust scheme
c        1 = implicit two fluid scheme
c
c      PARAMETER (idustIMPL = 1)
c      PARAMETER (imakedust=.TRUE.)
      PARAMETER (idustIMPL = 0)
      PARAMETER (imakedust=.FALSE.)
c
c--Allow dust grains to grow. At this moment dust growth only works with
c  the semi-implicit dust drag scheme. It shouldn't be used without it.
c
c      PARAMETER (idustGROW = 1)
      PARAMETER (idustGROW = 0)
c
c--ONE-FLUID DUST
c
c     NOTE: Postive numbers: explicit / negative numbers: implicit drag
c
c     0: no one-fluid dust
c     1: dustvar = sqrt(epsilon*rho)
c     2: dustvar = sqrt(epsilon/1-epsilon) Ballabio et al. 2018
c     -2: dustvar=sqrt(epsilon/1-epsilon) Elsender & Bate 2024 implicit
c     3: dustvar = asin(sqrt(epsilon))
c     4: dustvar = epsilon
c
      PARAMETER (idustFluid = 0)
c      PARAMETER (idustFluid = 1)
c      PARAMETER (idustFluid = 2)
c      PARAMETER (idustFluid = -2)

      PARAMETER (ndusttypes = 1)
c      PARAMETER (ndusttypes = 10)
c      PARAMETER (ndusttypes = 26)
c      PARAMETER (ndusttypes = 53)
c
c--Parameter for alpha_SS viscosity assumed for dust growth & diffusion
c      in a protostellar disc
c
      PARAMETER (alphaSS_const = 0.001)
c
c--Parameter for determining whether to dump dustFluid deltav's & tstop
c
      PARAMETER (iDumpDeltavTstop = .FALSE.)
c
c--For *explicit* evolution, this determines whether the dust evolution
c      variable is allowed to go negative or not.  The implicit scheme
c      avoids the possibility of negative values (Elsender & Bate 2024).
c
c      PARAMETER (dustvarmin = -1.0E+20)
      PARAMETER (dustvarmin = 0.0)
c
c--For *explicit* evolution, optionally limit the dust flux (if ever
c      used, only tends to be for discs, from Ballabio et al. 2018).
c
      PARAMETER (ilimitdustflux = .FALSE.)	
c
c--Hirashita & Yan (2009) type dust evolution (see Bate 2022)
c
c      PARAMETER (idimHY09 = idim)
      PARAMETER (idimHY09 = 1)
c
c--Whether the dust growth and one-fluid evolutions are coupled or not.
c     FALSE: the dust growth operates on the INITIAL dust fractions for
c        each SPH particle.  The one-fluid dust diffusion does not
c        alter the dust density, only grain population growth occurs.
c        Similarly, the dust diffusion happens based on the INITIAL
c        dust size distributions.  So this is like running two separate
c        simulations, one with growth but no diffusion, and one with
c        diffusion but no growth.
c
c     TRUE: The dust growth and dust diffusion both occur together.
c        The dust populations can move between SPH particles AND the
c        dust populations also evolve due to grain growth.
c
      PARAMETER (icoupled_HY09_dustFluid = .TRUE.)
c      PARAMETER (icoupled_HY09_dustFluid = .FALSE.)

c
c--END ONE-FLUID DUST
c
c--For chemistry need to use idim_h2 = idim
c
c      PARAMETER (idim_h2 = idim)
      PARAMETER (idim_h2 = 1)
c
c--Parameters derived from those defined above.
c
      PARAMETER (idim2 = idim + idim_MPI)
      PARAMETER (idim3 = idim + 2*idim_MPI)

      PARAMETER (mmax=2*idim + 2)
      PARAMETER (mmax2=mmax + idim_MPI)

      PARAMETER (imhdxsph=imhd)

      PARAMETER (isizealphaMM=imhd/idim+1)
c      PARAMETER (isizealphaMM=2)   ! For debugging

      PARAMETER (imhd2 = imhd + idim_MPI)
      PARAMETER (imhd3 = imhd + 2*idim_MPI)
      PARAMETER (iradtrans2 = iradtrans + idim_MPI)
      PARAMETER (idim_h2_2 = idim_h2 + idim_MPI)

      PARAMETER (idim_dustFluid = MAX(MIN(ABS(idustFluid),1)*idim,1))
      PARAMETER (idim_dustFluid2 = MAX(MIN(ABS(idustFluid),1)*idim2,1))
c--idim_dustFluid3 can be used with imakedust to set two-fluid dust 
c  in terminal velocity initially
      PARAMETER (idim_dustFluid3 = 
     &		MAX( MAX( MIN(ABS(idustFluid),1), idustIMPL)*idim2, 1))
      PARAMETER (idim_grow = idustGROW*idim)
      PARAMETER (idim_grow2 = idustGROW*idim2)
